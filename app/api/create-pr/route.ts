import { NextRequest, NextResponse } from 'next/server';

interface GeneratedTest {
  id: string;
  filename: string;
  content: string;
  framework: string;
}

export async function POST(request: NextRequest) {
  try {
    const { repository, tests, accessToken } = await request.json();
    
    if (!accessToken) {
      return NextResponse.json({ error: 'Access token required' }, { status: 401 });
    }
    
    if (!tests || tests.length === 0) {
      return NextResponse.json({ error: 'No tests provided' }, { status: 400 });
    }
    
    const token = accessToken;
    
    // 1. Get the default branch
    const repoResponse = await fetch(`https://api.github.com/repos/${repository}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'Test-Case-Generator'
      }
    });
    
    if (!repoResponse.ok) {
      throw new Error('Failed to fetch repository info');
    }
    
    const repoData = await repoResponse.json();
    const defaultBranch = repoData.default_branch;
    
    // 2. Get the latest commit SHA of the default branch
    const refResponse = await fetch(`https://api.github.com/repos/${repository}/git/refs/heads/${defaultBranch}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'Test-Case-Generator'
      }
    });
    
    if (!refResponse.ok) {
      throw new Error('Failed to fetch branch reference');
    }
    
    const refData = await refResponse.json();
    const baseSha = refData.object.sha;
    
    // 3. Create a new branch
    const branchName = `ai-generated-tests-${Date.now()}`;
    
    const branchResponse = await fetch(`https://api.github.com/repos/${repository}/git/refs`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'Test-Case-Generator',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ref: `refs/heads/${branchName}`,
        sha: baseSha
      })
    });
    
    if (!branchResponse.ok) {
      throw new Error('Failed to create branch');
    }
    
    // 4. Create files for each test
    const fileCreationPromises = tests.map(async (test: GeneratedTest) => {
      const filePath = `tests/${test.filename}`;
      const content = Buffer.from(test.content).toString('base64');
      
      const fileResponse = await fetch(`https://api.github.com/repos/${repository}/contents/${filePath}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Test-Case-Generator',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message: `Add AI-generated test: ${test.filename}`,
          content: content,
          branch: branchName
        })
      });
      
      return fileResponse.ok;
    });
    
    const fileResults = await Promise.all(fileCreationPromises);
    const failedFiles = fileResults.filter(result => !result).length;
    
    if (failedFiles > 0) {
      console.warn(`${failedFiles} files failed to be created`);
    }
    
    // 5. Create pull request
    const prTitle = `ðŸ¤– AI Generated Test Cases (${tests.length} files)`;
    const prBody = `
## AI Generated Test Cases

This pull request contains AI-generated test cases for the following files:

${tests.map((test: GeneratedTest) => `- **${test.filename}** (${test.framework})`).join('\n')}

### What's included:
- Comprehensive test coverage for selected source files
- Proper test structure and organization
- Edge case handling and validation tests
- Production-ready test code

### Frameworks used:
${[...new Set(tests.map((t: GeneratedTest) => t.framework))].map(framework => `- ${framework}`).join('\n')}

---
*Generated by AI Test Case Generator*
    `;
    
    const prResponse = await fetch(`https://api.github.com/repos/${repository}/pulls`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'Test-Case-Generator',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        title: prTitle,
        body: prBody,
        head: branchName,
        base: defaultBranch
      })
    });
    
    if (!prResponse.ok) {
      const errorData = await prResponse.json();
      throw new Error(`Failed to create pull request: ${errorData.message}`);
    }
    
    const prData = await prResponse.json();
    
    return NextResponse.json({
      number: prData.number,
      html_url: prData.html_url,
      branch: branchName
    });
    
  } catch (error) {
    console.error('Create PR error:', error);
    return NextResponse.json(
      { error: `Failed to create pull request: ${error instanceof Error ? error.message : 'Unknown error'}` }, 
      { status: 500 }
    );
  }
}